name: Build & Deploy FastAPI + Streamlit 

on:
  push:
    branches: [ "main" ]

# Needed to push to GHCR with GITHUB_TOKEN
permissions:
  contents: read
  packages: write

env:
  # Adjust names/region as you like
  AZURE_LOCATION: eastus
  AZURE_GROUP_NAME: fraud-single-rg
  AZURE_ENV_NAME: fraud-single-env
  AZURE_CONTAINER_APP_NAME: fraud-single-app
  REGISTRY_SERVER: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (GITHUB_TOKEN)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Lowercase owner/repo
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Build & Push image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile          # Dockerfile should run nginx + uvicorn + streamlit via start.sh
          push: true
          tags: |
            ghcr.io/${{ env.REPO }}:${{ github.sha }}
            ghcr.io/${{ env.REPO }}:latest
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Azure Login (with SP)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      # Try to set subscription from secret; if empty, fall back to default from az account list.
      - name: Ensure subscription context
        shell: bash
        run: |
          set -e
          # Prefer explicit secret
          SUB="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          if [ -z "$SUB" ]; then
            echo "AZURE_SUBSCRIPTION_ID secret is empty. Attempting to detect default subscription from current login..."
            SUB=$(az account list --query "[?isDefault].id | [0]" -o tsv || true)
          fi
  
          if [ -z "$SUB" ]; then
            echo "::error::No subscription id available. Set repository secret AZURE_SUBSCRIPTION_ID, or ensure the Service Principal has access to at least one Enabled subscription."
            echo "Subscriptions visible to this principal:"
            az account list -o table || true
            exit 1
          fi
  
          echo "Using subscription: $SUB"
          az account set --subscription "$SUB"
  
          # Validate state
          STATE=$(az account show --query "state" -o tsv)
          if [ "$STATE" != "Enabled" ]; then
            echo "::error::Subscription '$SUB' state is '$STATE' (must be Enabled)."
            exit 1
          fi
          echo "Subscription context OK."
  
      - name: Lowercase owner/repo
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
  
      - name: Create/Update Azure Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -e
            IMAGE="ghcr.io/${{ env.REPO }}:${{ github.sha }}"
            REGISTRY_USER="${{ github.actor }}"
            REGISTRY_PASS="${{ secrets.PAT }}"   # PAT must have read:packages (SSO-enabled if org uses SSO)
  
            az config set extension.use_dynamic_install=yes_without_prompt
  
            echo "Ensuring Resource Group and Container App Environment exist..."
            az group create -n "${{ env.AZURE_GROUP_NAME }}" -l "${{ env.AZURE_LOCATION }}" || true
            az containerapp env create \
              -n "${{ env.AZURE_ENV_NAME }}" \
              -g "${{ env.AZURE_GROUP_NAME }}" \
              --location "${{ env.AZURE_LOCATION }}" || true
  
            if ! az containerapp show -n "${{ env.AZURE_CONTAINER_APP_NAME }}" -g "${{ env.AZURE_GROUP_NAME }}" &>/dev/null; then
              echo "Creating Container App..."
              az containerapp create \
                -n "${{ env.AZURE_CONTAINER_APP_NAME }}" \
                -g "${{ env.AZURE_GROUP_NAME }}" \
                --environment "${{ env.AZURE_ENV_NAME }}" \
                --image "$IMAGE" \
                --ingress external \
                --target-port 80 \
                --cpu 2 --memory 4Gi \
                --registry-server ghcr.io \
                --registry-username "$REGISTRY_USER" \
                --registry-password "$REGISTRY_PASS" \
                --env-vars API_URL=/api/predict-raw
            else
              echo "Updating Container App..."
              az containerapp registry set \
                -n "${{ env.AZURE_CONTAINER_APP_NAME }}" \
                -g "${{ env.AZURE_GROUP_NAME }}" \
                --server ghcr.io \
                --username "$REGISTRY_USER" \
                --password "$REGISTRY_PASS"
  
              az containerapp update \
                -n "${{ env.AZURE_CONTAINER_APP_NAME }}" \
                -g "${{ env.AZURE_GROUP_NAME }}" \
                --image "$IMAGE" \
                --cpu 2 --memory 4Gi \
                --set-env-vars API_URL=/api/predict-raw
            fi
  
            echo "Public FQDN:"
            az containerapp show \
              -n "${{ env.AZURE_CONTAINER_APP_NAME }}" \
              -g "${{ env.AZURE_GROUP_NAME }}" \
              --query properties.configuration.ingress.fqdn -o tsv
