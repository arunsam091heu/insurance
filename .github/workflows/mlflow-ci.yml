name: Build & Deploy FastAPI + Streamlit (Container App - Central Asia)

on:
  push:
    branches: [ "main" ]

# Needed to push to GHCR with GITHUB_TOKEN
permissions:
  contents: read
  packages: write

env:
  AZURE_LOCATION: centralasia
  AZURE_GROUP_NAME: fraud-central-rg
  AZURE_ENV_NAME: fraud-central-env
  AZURE_CONTAINER_APP_NAME: fraud-central-app
  REGISTRY_SERVER: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Lowercase owner/repo
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Build & Push image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.REPO }}:${{ github.sha }}
            ghcr.io/${{ env.REPO }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # üëá Use creds JSON ONLY. Do not pass client-id/tenant-id/subscription-id here.
      - name: Azure Login (creds JSON)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set subscription explicitly (from secret) or fail clearly
      - name: Ensure subscription context
        shell: bash
        run: |
          set -e
          SUB="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          if [ -z "$SUB" ]; then
            echo "::error:: AZURE_SUBSCRIPTION_ID secret is missing. Add it in repo Settings ‚Üí Secrets."
            exit 1
          fi
          az account set --subscription "$SUB"
          echo "Current subscription:"
          az account show --query "{name:name, id:id, state:state}" -o tsv
          STATE=$(az account show --query "state" -o tsv)
          if [ "$STATE" != "Enabled" ]; then
            echo "::error:: Subscription state is '$STATE' (must be Enabled)."
            exit 1
          fi

      - name: Lowercase owner/repo
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Create/Update Azure Container App (Central Asia)
        uses: azure/CLI@v1
        with:
          inlineScript: |
            set -e

            RG="${{ env.AZURE_GROUP_NAME }}"
            LOC="${{ env.AZURE_LOCATION }}"
            ENV="${{ env.AZURE_ENV_NAME }}"
            APP="${{ env.AZURE_CONTAINER_APP_NAME }}"

            IMAGE="ghcr.io/${{ env.REPO }}:${{ github.sha }}"
            REGISTRY_SERVER="${{ env.REGISTRY_SERVER }}"
            REGISTRY_USER="${{ github.actor }}"
            PAT="${{ secrets.PAT }}"  # Classic PAT with read:packages if GHCR is private

            az config set extension.use_dynamic_install=yes_without_prompt

            echo "üß∞ Ensure Resource Group exists"
            az group create -n "$RG" -l "$LOC" 1>/dev/null

            echo "üîé Check if Container Apps Environment exists (in this RG)"
            if az containerapp env show -n "$ENV" -g "$RG" 1>/dev/null 2>&1; then
              echo "‚úÖ Environment '$ENV' already exists in $LOC"
            else
              echo "üÜï Creating Environment '$ENV' in $LOC..."
              az containerapp env create -n "$ENV" -g "$RG" --location "$LOC"
            fi

            echo "üîê Configure registry auth"
            if [ -z "$PAT" ]; then
              echo "üü¢ No PAT provided ‚Üí assuming GHCR image is PUBLIC"
              REGISTRY_ARGS=""
            else
              echo "üü† PAT provided ‚Üí using GHCR PRIVATE registry auth"
              REGISTRY_ARGS="--registry-server $REGISTRY_SERVER --registry-username $REGISTRY_USER --registry-password $PAT"
            fi

            echo "üîé Check if Container App exists"
            if az containerapp show -n "$APP" -g "$RG" 1>/dev/null 2>&1; then
              echo "üîÑ Updating Container App..."
              if [ -n "$PAT" ]; then
                az containerapp registry set -n "$APP" -g "$RG" \
                  --server "$REGISTRY_SERVER" --username "$REGISTRY_USER" --password "$PAT"
              fi
              az containerapp update \
                -n "$APP" -g "$RG" \
                --image "$IMAGE" \
                --cpu 2 --memory 4Gi \
                --set-env-vars API_URL=/api/predict-raw
            else
              echo "üÜï Creating Container App..."
              # shellcheck disable=SC2086
              az containerapp create \
                -n "$APP" -g "$RG" \
                --environment "$ENV" \
                --ingress external \
                --target-port 80 \
                --cpu 2 --memory 4Gi \
                --image "$IMAGE" \
                $REGISTRY_ARGS \
                --env-vars API_URL=/api/predict-raw
            fi

            echo "üåê Public FQDN:"
            az containerapp show -n "$APP" -g "$RG" --query properties.configuration.ingress.fqdn -o tsv
